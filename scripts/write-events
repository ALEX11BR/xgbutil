#!/usr/bin/env python2.7

import sys

events = [
    'KeyPressEvent',
    'KeyReleaseEvent',
    'ButtonPressEvent',
    'ButtonReleaseEvent',
    'MotionNotifyEvent',
    'EnterNotifyEvent',
    'LeaveNotifyEvent',
    'FocusInEvent',
    'FocusOutEvent',
    'KeymapNotifyEvent',
    'ExposeEvent',
    'GraphicsExposureEvent',
    'NoExposureEvent',
    'VisibilityNotifyEvent',
    'CreateNotifyEvent',
    'DestroyNotifyEvent',
    'UnmapNotifyEvent',
    'MapNotifyEvent',
    'MapRequestEvent',
    'ReparentNotifyEvent',
    'ConfigureNotifyEvent',
    'ConfigureRequestEvent',
    'GravityNotifyEvent',
    'ResizeRequestEvent',
    'CirculateNotifyEvent',
    'CirculateRequestEvent',
    'PropertyNotifyEvent',
    'SelectionClearEvent',
    'SelectionRequestEvent',
    'SelectionNotifyEvent',
    'ColormapNotifyEvent',
    'ClientMessageEvent',
    'MappingNotifyEvent',
]

assert len(sys.argv) == 2

if sys.argv[1] == 'evtypes':
    print '''/*
    Defines event types and their associated methods automatically.
    
    Eventually, the no-op implementations of 'Bytes' will move out of here.

    This file is automatically generated using `scripts/write-events evtypes`.

    Edit it at your peril.
*/'''
    print 'package xevent'
    print
    print 'import "fmt"'
    print 'import "code.google.com/p/jamslam-x-go-binding/xgb"'
    print

    for e in events:
        # Skip ClientMessageEvent
        if e == 'ClientMessageEvent':
            continue

        print 'type %s struct {' % e
        print '    *xgb.%s' % e
        print '}'
        print
        print 'const %s = xgb.%s' % (e[:-5], e[:-5])
        print
        print 'func (ev *%s) Bytes() []byte { return nil }' % e
        print
        print 'func (ev %s) String() string {' % e
        print '    return fmt.Sprintf("%%v", ev.%s)' % e
        print '}'
        print
elif sys.argv[1] == 'callbacks':
    print '''/*
    Does all the plumbing to allow a simple callback interface for users.

    This file is automatically generated using `scripts/write-events callbacks`.

    Edit it at your peril.
*/'''
    print 'package xevent'
    print
    print 'import "code.google.com/p/jamslam-x-go-binding/xgb"'
    print 'import "github.com/BurntSushi/xgbutil"'
    print

    # print 'type Callback interface {' 
    # print '    Connect(xu *xgbutil.XUtil, win xgb.Id, evtype int)' 
    # print '    Run(xu *xgbutil.XUtil, ev interface{})' 
    # print '}' 
    # print 

    for e in events:
        e = e[:-5]
        print 'type %sFun func(xu *xgbutil.XUtil, event %sEvent)' % (e, e)
        print
        print 'func (callback %sFun) '\
                'Connect(xu *xgbutil.XUtil, win xgb.Id) {' % e
        print '    xu.AttachCallback(%s, win, callback)' % e
        print '}'
        print
        print 'func (callback %sFun) ' \
                'Run(xu *xgbutil.XUtil, event interface{}) {' % e
        print '    callback(xu, event.(%sEvent))' % e
        print '}'
        print
elif sys.argv[1] == 'mainloop':
    s = ' ' * 8
    for e in events:
        print '%scase xgb.%s:' % (s, e)
        print '%s    e := %s{&event}' % (s, e)
        print '%s    xu.RunCallbacks(e, %s, e.Event)' % (s, e[:-5])

